package com.zlk.bigdemo.application.widget.selector.utils;import android.content.ContentResolver;import android.content.Context;import android.database.Cursor;import android.net.Uri;import android.provider.MediaStore.Images;import android.provider.MediaStore.Images.Media;import android.text.TextUtils;import com.zlk.bigdemo.application.widget.selector.support.AlbumItem;import com.zlk.bigdemo.application.widget.selector.support.ImageItem;import java.io.File;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * 获取相册的公共类 */public class AlbumManager {		private static AlbumManager sInstance;		public static final int THUMBNAIL_SIZE = 300;	public static final int ORGIN_SIZE = 1000;		private AlbumManager(){}		public static AlbumManager getInstance(){		if(sInstance == null){			sInstance = new AlbumManager();		}		return sInstance;	}		private Map<String, ImageItem> mCache = new HashMap<String, ImageItem>();	private static final String[] SENSE_PROJECTION = new String[] {			Images.ImageColumns.BUCKET_ID,			"COUNT(" + Images.ImageColumns._ID + ") " };	private static final String[] PROJECTION_IMAGE = new String[] {			Images.ImageColumns._ID, Images.ImageColumns.DATA };	public static final String DEFAULT_IMAGE_SORT_ORDER = Images.ImageColumns.DATE_TAKEN			+ " DESC";	private static final String[] ACCEPTABLE_IMAGE_TYPES = new String[] {};	private static final String WHERE_CLAUSE_WITH_BUCKET_ID = Media.BUCKET_ID			+ " = ?";	private static final String[] PROJECTION = new String[] {			Media._ID, Media.DATA };	/**	 * 获得相册目录	 */	public List<AlbumItem> getAlbumsPath(Context context) {		final Uri uriImages = Media.EXTERNAL_CONTENT_URI;		final ContentResolver cr = context.getContentResolver();		final String where = Images.ImageColumns.BUCKET_ID + "!=0) GROUP BY ("				+ Images.ImageColumns.BUCKET_ID + " ";		final Cursor cursorImages = cr.query(uriImages, SENSE_PROJECTION,				where, null, DEFAULT_IMAGE_SORT_ORDER);		if (cursorImages == null) {			return null;		}		List<AlbumItem> menuList = new ArrayList<AlbumItem>();		try {			if (cursorImages.moveToFirst()) {				do {					long setId = cursorImages.getLong(0);					int count = cursorImages.getInt(1);					AlbumItem item = getAlbumItem(context, count, setId);					if(item != null){						menuList.add(item);					}				} while (cursorImages.moveToNext());			}		} finally {			cursorImages.close();		}		if(menuList.size() > 0){			AlbumItem item1 = menuList.get(0);			AlbumItem item = new AlbumItem();			item.bucket_id = 0;			item.fileFolderName = "所有图片";			item.image_id = item1.image_id;			item.imagepath = item1.imagepath;			item.isChecked = true;			menuList.add(0, item);		}		return menuList;	}	/**	 * 获得相册的item	 *	 * @param numSets	 * @param bucketId	 */	private AlbumItem getAlbumItem(Context context, int numSets,			long bucketId) {		AlbumItem item = new AlbumItem();		item.count = numSets;		item.bucket_id = bucketId;		item.isChecked = false;		final ContentResolver cr = context.getContentResolver();		String whereClause = null;		StringBuffer whereString = new StringBuffer(				Images.ImageColumns.BUCKET_ID + " in (");		whereString.append(bucketId);		whereString.append(")");		whereClause = whereString.toString();		final Cursor cursorImageItems = cr.query(				Media.EXTERNAL_CONTENT_URI, PROJECTION_IMAGE,				whereClause, null, DEFAULT_IMAGE_SORT_ORDER);		boolean isValide = false;		try {			while (cursorImageItems.moveToNext()) {				item.image_id = cursorImageItems.getLong(0);				String imagepath = cursorImageItems.getString(1);				item.imagepath = imagepath;				if (!TextUtils.isEmpty(imagepath)) {					String[] str = imagepath.split("/");					if (str.length >= 2) {						item.fileFolderName = str[str.length - 2];						File file = new File(imagepath);						if(file.exists()){							isValide = true;							break;						}					}				}			}		} finally {			cursorImageItems.close();		}		if(isValide){			return item;		}		return null;	}	public List<ImageItem> getAlbumPicture(Context context,long bucket_id) {		Cursor cursor = null;		final List<ImageItem> list = new ArrayList<ImageItem>();		if(bucket_id == 0){			ImageItem cameraItem = new ImageItem(0, "");			list.add(cameraItem);		}		try {			if (bucket_id != 0) {				cursor = context.getContentResolver().query(						Media.EXTERNAL_CONTENT_URI,						PROJECTION, WHERE_CLAUSE_WITH_BUCKET_ID,						whereClauseArgs(String.valueOf(bucket_id)),						AlbumManager.DEFAULT_IMAGE_SORT_ORDER);			} else {				cursor = context.getContentResolver().query(						Media.EXTERNAL_CONTENT_URI,						PROJECTION, null, null,						AlbumManager.DEFAULT_IMAGE_SORT_ORDER);			}			if (cursor != null) {				while (cursor.moveToNext()) {					long id = cursor.getLong(0);					String imagePath = cursor.getString(1);					File file = new File(imagePath);					if (file.exists()) {						ImageItem item = mCache.get(imagePath);						if(item == null){							item = new ImageItem(id, imagePath);							mCache.put(imagePath, item);						}						list.add(item);					}				}			}		} catch (Exception e) {		} finally {			if (cursor != null) {				cursor.close();			}		}		return list;	}		public ImageItem getImageItem(String path ){		return mCache.get(path);	}	private String[] whereClauseArgs(String bucketId) {		if (bucketId != null) {			int count = ACCEPTABLE_IMAGE_TYPES.length;			String[] result = new String[count + 1];			System.arraycopy(ACCEPTABLE_IMAGE_TYPES, 0, result, 0, count);			result[count] = bucketId;			return result;		}		return ACCEPTABLE_IMAGE_TYPES;	}		public void clear(){		mCache.clear();	}}